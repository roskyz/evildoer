// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: group.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupSrv_ListGroup_FullMethodName   = "/idl.GroupSrv/ListGroup"
	GroupSrv_GetGroup_FullMethodName    = "/idl.GroupSrv/GetGroup"
	GroupSrv_CreateGroup_FullMethodName = "/idl.GroupSrv/CreateGroup"
	GroupSrv_UpdateGroup_FullMethodName = "/idl.GroupSrv/UpdateGroup"
	GroupSrv_ListMode_FullMethodName    = "/idl.GroupSrv/ListMode"
)

// GroupSrvClient is the client API for GroupSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupSrvClient interface {
	ListGroup(ctx context.Context, in *ListGroupReq, opts ...grpc.CallOption) (*ListGroupResponse, error)
	GetGroup(ctx context.Context, in *IDReqOrResponse, opts ...grpc.CallOption) (*GetGroupResponse, error)
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*DefaultResponse, error)
	ListMode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListModeResponse, error)
}

type groupSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupSrvClient(cc grpc.ClientConnInterface) GroupSrvClient {
	return &groupSrvClient{cc}
}

func (c *groupSrvClient) ListGroup(ctx context.Context, in *ListGroupReq, opts ...grpc.CallOption) (*ListGroupResponse, error) {
	out := new(ListGroupResponse)
	err := c.cc.Invoke(ctx, GroupSrv_ListGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSrvClient) GetGroup(ctx context.Context, in *IDReqOrResponse, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, GroupSrv_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSrvClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, GroupSrv_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSrvClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, GroupSrv_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSrvClient) ListMode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListModeResponse, error) {
	out := new(ListModeResponse)
	err := c.cc.Invoke(ctx, GroupSrv_ListMode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupSrvServer is the server API for GroupSrv service.
// All implementations must embed UnimplementedGroupSrvServer
// for forward compatibility
type GroupSrvServer interface {
	ListGroup(context.Context, *ListGroupReq) (*ListGroupResponse, error)
	GetGroup(context.Context, *IDReqOrResponse) (*GetGroupResponse, error)
	CreateGroup(context.Context, *Group) (*CreateGroupResponse, error)
	UpdateGroup(context.Context, *Group) (*DefaultResponse, error)
	ListMode(context.Context, *emptypb.Empty) (*ListModeResponse, error)
	mustEmbedUnimplementedGroupSrvServer()
}

// UnimplementedGroupSrvServer must be embedded to have forward compatible implementations.
type UnimplementedGroupSrvServer struct {
}

func (UnimplementedGroupSrvServer) ListGroup(context.Context, *ListGroupReq) (*ListGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroup not implemented")
}
func (UnimplementedGroupSrvServer) GetGroup(context.Context, *IDReqOrResponse) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupSrvServer) CreateGroup(context.Context, *Group) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupSrvServer) UpdateGroup(context.Context, *Group) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedGroupSrvServer) ListMode(context.Context, *emptypb.Empty) (*ListModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMode not implemented")
}
func (UnimplementedGroupSrvServer) mustEmbedUnimplementedGroupSrvServer() {}

// UnsafeGroupSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupSrvServer will
// result in compilation errors.
type UnsafeGroupSrvServer interface {
	mustEmbedUnimplementedGroupSrvServer()
}

func RegisterGroupSrvServer(s grpc.ServiceRegistrar, srv GroupSrvServer) {
	s.RegisterService(&GroupSrv_ServiceDesc, srv)
}

func _GroupSrv_ListGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSrvServer).ListGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSrv_ListGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSrvServer).ListGroup(ctx, req.(*ListGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSrv_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReqOrResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSrvServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSrv_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSrvServer).GetGroup(ctx, req.(*IDReqOrResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSrv_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSrvServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSrv_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSrvServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSrv_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSrvServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSrv_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSrvServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSrv_ListMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSrvServer).ListMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSrv_ListMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSrvServer).ListMode(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupSrv_ServiceDesc is the grpc.ServiceDesc for GroupSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idl.GroupSrv",
	HandlerType: (*GroupSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGroup",
			Handler:    _GroupSrv_ListGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _GroupSrv_GetGroup_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _GroupSrv_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _GroupSrv_UpdateGroup_Handler,
		},
		{
			MethodName: "ListMode",
			Handler:    _GroupSrv_ListMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.proto",
}
