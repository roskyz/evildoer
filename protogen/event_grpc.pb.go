// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: event.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventSrv_SearchEvent_FullMethodName = "/idl.EventSrv/SearchEvent"
	EventSrv_GetEvent_FullMethodName    = "/idl.EventSrv/GetEvent"
	EventSrv_CreateEvent_FullMethodName = "/idl.EventSrv/CreateEvent"
)

// EventSrvClient is the client API for EventSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventSrvClient interface {
	SearchEvent(ctx context.Context, in *SearchEventReq, opts ...grpc.CallOption) (*SearchEventResponse, error)
	GetEvent(ctx context.Context, in *GetEventReq, opts ...grpc.CallOption) (*GetEventResponse, error)
	CreateEvent(ctx context.Context, in *CreateEventReq, opts ...grpc.CallOption) (*Event, error)
}

type eventSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewEventSrvClient(cc grpc.ClientConnInterface) EventSrvClient {
	return &eventSrvClient{cc}
}

func (c *eventSrvClient) SearchEvent(ctx context.Context, in *SearchEventReq, opts ...grpc.CallOption) (*SearchEventResponse, error) {
	out := new(SearchEventResponse)
	err := c.cc.Invoke(ctx, EventSrv_SearchEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSrvClient) GetEvent(ctx context.Context, in *GetEventReq, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, EventSrv_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSrvClient) CreateEvent(ctx context.Context, in *CreateEventReq, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, EventSrv_CreateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventSrvServer is the server API for EventSrv service.
// All implementations must embed UnimplementedEventSrvServer
// for forward compatibility
type EventSrvServer interface {
	SearchEvent(context.Context, *SearchEventReq) (*SearchEventResponse, error)
	GetEvent(context.Context, *GetEventReq) (*GetEventResponse, error)
	CreateEvent(context.Context, *CreateEventReq) (*Event, error)
	mustEmbedUnimplementedEventSrvServer()
}

// UnimplementedEventSrvServer must be embedded to have forward compatible implementations.
type UnimplementedEventSrvServer struct {
}

func (UnimplementedEventSrvServer) SearchEvent(context.Context, *SearchEventReq) (*SearchEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEvent not implemented")
}
func (UnimplementedEventSrvServer) GetEvent(context.Context, *GetEventReq) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedEventSrvServer) CreateEvent(context.Context, *CreateEventReq) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedEventSrvServer) mustEmbedUnimplementedEventSrvServer() {}

// UnsafeEventSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventSrvServer will
// result in compilation errors.
type UnsafeEventSrvServer interface {
	mustEmbedUnimplementedEventSrvServer()
}

func RegisterEventSrvServer(s grpc.ServiceRegistrar, srv EventSrvServer) {
	s.RegisterService(&EventSrv_ServiceDesc, srv)
}

func _EventSrv_SearchEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSrvServer).SearchEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventSrv_SearchEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSrvServer).SearchEvent(ctx, req.(*SearchEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSrv_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSrvServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventSrv_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSrvServer).GetEvent(ctx, req.(*GetEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSrv_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSrvServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventSrv_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSrvServer).CreateEvent(ctx, req.(*CreateEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EventSrv_ServiceDesc is the grpc.ServiceDesc for EventSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idl.EventSrv",
	HandlerType: (*EventSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchEvent",
			Handler:    _EventSrv_SearchEvent_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _EventSrv_GetEvent_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _EventSrv_CreateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}
