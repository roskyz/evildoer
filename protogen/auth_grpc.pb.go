// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: auth.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthSrv_Auth_FullMethodName = "/idl.AuthSrv/Auth"
)

// AuthSrvClient is the client API for AuthSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthSrvClient interface {
	Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthSrvClient(cc grpc.ClientConnInterface) AuthSrvClient {
	return &authSrvClient{cc}
}

func (c *authSrvClient) Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AuthSrv_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthSrvServer is the server API for AuthSrv service.
// All implementations must embed UnimplementedAuthSrvServer
// for forward compatibility
type AuthSrvServer interface {
	Auth(context.Context, *AuthReq) (*AuthResponse, error)
	mustEmbedUnimplementedAuthSrvServer()
}

// UnimplementedAuthSrvServer must be embedded to have forward compatible implementations.
type UnimplementedAuthSrvServer struct {
}

func (UnimplementedAuthSrvServer) Auth(context.Context, *AuthReq) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAuthSrvServer) mustEmbedUnimplementedAuthSrvServer() {}

// UnsafeAuthSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthSrvServer will
// result in compilation errors.
type UnsafeAuthSrvServer interface {
	mustEmbedUnimplementedAuthSrvServer()
}

func RegisterAuthSrvServer(s grpc.ServiceRegistrar, srv AuthSrvServer) {
	s.RegisterService(&AuthSrv_ServiceDesc, srv)
}

func _AuthSrv_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSrvServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthSrv_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSrvServer).Auth(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthSrv_ServiceDesc is the grpc.ServiceDesc for AuthSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idl.AuthSrv",
	HandlerType: (*AuthSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _AuthSrv_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
